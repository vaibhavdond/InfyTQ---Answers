class Stack:
    def __init__(self,max_size):
        self.__max_size=max_size
        self.__elements=[None]*self.__max_size
        self.__top=-1
    
    def get_max_size(self):
        return self.__max_size
    
    def is_full(self):
        if len(self.__elements)==self.__max_size-1:
            return True
        return False

    def push(self,data):
        if not self.is_full():
            self.__top += 1
            index = self.__top
            self.__elements[index] = data
        else:
            print("Can't insert data. Stack is Full")

    
    def is_empty(self):
        if self.__top == -1:
            return True
        return False
    
    def pop(self):
        if not self.is_empty():
            index = self.__top
            self.__top -= 1
            return self.__elements.pop(index)
        else:
            return "Can't remove item. Stack is empty."

    def display(self):
        index = self.__top
        if index>=0:
            print("Stack data(Top to Bottom): ")
            while(index>=0):
                print(self.__elements[index])
                index -= 1
        
    
                                              
    #You can use the below __str__() to print the elements of the DS object while debugging
    def __str__(self):
        msg=[]
        index=self.__top
        while(index>=0):
            msg.append((str)(self.__elements[index]))
            index-=1
        msg=" ".join(msg)
        msg="Stack data(Top to Bottom): "+msg
        return msg

stack1=Stack(5)
#Push all the required element(s).
stack1.push("Shirt1")
stack1.push("Shirt2")
stack1.push("Shirt3")
stack1.push("Shirt4")
stack1.push("Shirt5")
#Pop an element
print(stack1.pop())
stack1.display()